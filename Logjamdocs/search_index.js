var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Logjam","category":"page"},{"location":"#Logjam","page":"Home","title":"Logjam","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for Logjam.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides tools for geographical mapping and handling U.S. geographical and statistical data through the MapTools and DataTools modules.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Logjam.MapTools, Logjam.DataTools]","category":"page"},{"location":"#Logjam.MapTools","page":"Home","title":"Logjam.MapTools","text":"MapTools\n\nA module for creating geographical maps using the Makie ecosystem.\n\nOverview\n\nThe MapTools module provides a collection of tools and utilities that enable users to create detailed map visualizations, define and manipulate geographical regions, calculate bounding boxes, align text labels, and check if points lie within specific geographical boundaries.\n\nExported Functions\n\nmakemap: Creates a map visualization for predefined or user-defined regions of interest with various customizable options.\nmapbbox: Calculates the bounding box for a set of geographic coordinates with optional expansion.\naligntext: Determines the best alignment and offset positions for text labels on a map based on point arrangements.\nisptinbbox: Checks if a given point lies within a specified bounding box.\n\nConstants\n\nWORLD_LIMITS: Defines geographical limits for world map projections.\nUS_LIMITS: Defines geographical limits for map projections of the contiguous United States.\nCUS_LIMITS: Defines geographical limits for map projections of the continental United States (excluding Alaska and Hawaii).\n\nDependencies\n\nThe module depends on the following packages:\n\nSerialization: For loading pre-serialized geographic data.\nGeoMakie, GLMakie, CairoMakie: For creating and rendering maps.\nDelaunayTriangulation: For triangulation in text alignment functions.\n\n\n\n\n\n","category":"module"},{"location":"#Logjam.MapTools.CUS_LIMITS","page":"Home","title":"Logjam.MapTools.CUS_LIMITS","text":"CUS_LIMITS\n\nA constant defining the geographical limits for a map projection of the contiguous United States (excluding Alaska and Hawaii).\n\nThe first tuple specifies the longitude limits in degrees: (-125, -65).\nThe second tuple specifies the latitude limits in degrees: (24, 50).\n\n\n\n\n\n","category":"constant"},{"location":"#Logjam.MapTools.US_LIMITS","page":"Home","title":"Logjam.MapTools.US_LIMITS","text":"US_LIMITS\n\nA constant defining the geographical limits for a map projection of the contiguous United States.\n\nThe first tuple specifies the longitude limits in degrees: (-180, -65).\nThe second tuple specifies the latitude limits in degrees: (15, 72).\n\n\n\n\n\n","category":"constant"},{"location":"#Logjam.MapTools.WORLD_LIMITS","page":"Home","title":"Logjam.MapTools.WORLD_LIMITS","text":"WORLD_LIMITS\n\nA constant defining the geographical limits for a world map projection.\n\nThe first tuple specifies the longitude limits in degrees: (-180, 180).\nThe second tuple specifies the latitude limits in degrees: (-75, 75).\n\n\n\n\n\n","category":"constant"},{"location":"#Logjam.MapTools.aligntext-Tuple{Union{Real, Tuple{Vararg{Real}}, AbstractVector}, Union{Real, Tuple{Vararg{Real}}, AbstractVector}}","page":"Home","title":"Logjam.MapTools.aligntext","text":"aligntext(x::Union{Real, AbstractVector, Tuple{Vararg{Real}}}, \n          y::Union{Real, AbstractVector, Tuple{Vararg{Real}}};\n          offsetamt::Real=1, mindistratio::Real=1.5) -> Pair, Pair\n\nDetermines text alignment and offset positions for given points.\n\nThis function attempts to calculate the best alignment and offset positions for text labels based on the spatial arrangement of the points provided. It is particularly useful for positioning labels or annotations on a plot, ensuring that they do not overlap and remain readable. The function can handle various input formats for the points, including scalars, vectors, and tuples, and adjusts the text position to try to avoid collisions with nearby labels or graphical elements.\n\nArguments\n\nx: Scalar, vector, or tuple representing the x-coordinates for the points.\ny: Scalar, vector, or tuple representing the y-coordinates for the points.\noffsetamt: Scalar value specifying the amount of offset to apply to the text labels. This controls the distance by which the text is shifted away from the point. Default is 1.\nmindistratio: Scalar value that sets the minimum distance ratio used to decide the best alignment for text labels relative to adjacent points. Default is 1.5.\n\nReturns\n\n:align => alignout: A Pair where :align is associated with an array of 2-tuples representing horizontal and vertical alignment symbols (e.g., (:left, :bottom), (:center, :top)) corresponding to each point.\n:offset => offsetout: A Pair where :offset is associated with an array of 2-tuples representing the x and y offsets to be applied to the text labels for each point.\n\nBehavior\n\nSingle Point: If only one point is provided, the function returns a default alignment (:left, :bottom) with the specified offsetamt.\nTwo Points: If two points are provided, the function calculates the angle between the points and determines the best alignment and offset in both directions.\nThree or More Points: For three or more points, the function uses Delaunay triangulation to determine the optimal alignment by analyzing the angles and distances between adjacent points. It ensures that labels do not overlap and are well-positioned relative to each other.\n\nExample\n\n# Example: Cities in North Carolina with populaions over 100,000\nusing GeoMakie, DataFrames\ndf = filter(r -> (r.STFIP == st2fips(:NC)) && (r.POP > 100_000), usplace())\nx, y, name = df.LON, df.LAT, df.NAME\nfig, ax = makemap(x, y)\nscatter!(ax, x, y)\ntext!(ax, x, y, text=name; aligntext(x, y)...)  # Note \";\" and \"...\" for splatting\ndisplay(fig)\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.MapTools.bestfit-Tuple{Any, Any}","page":"Home","title":"Logjam.MapTools.bestfit","text":"bestfit(ang, Δ) -> 2-Tuple, 2-Tuple\n\nDetermine the text alignment and offset for a given angle.\n\nHelper function used by aligntext to determines the text alignment and offset for a given angle, ang, based on predefined angular ranges. The function calculates the horizontal and vertical alignment based on the angle and the offset Δ to ensure proper text placement. \n\nArguments\n\nang: A Real value representing the angle in degrees. The angle is normalized to the range [0, 360) if it is negative.\nΔ: A Real value representing the base offset to be applied for alignment purposes.\n\nReturns\n\nA Tuple containing two elements:\n(halign, valign): A pair of symbols representing the horizontal (:left, :center, :right) and vertical (:top, :center, :bottom) alignment.\n(hoffset, voffset): A pair of numerical offsets corresponding to the horizontal and vertical alignments, calculated based on the input angle ang and the offset Δ.\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.MapTools.isptinbbox-Tuple{Any, Tuple{Union{Tuple{Real, Real}, AbstractVector{<:Real}}, Union{Tuple{Real, Real}, AbstractVector{<:Real}}}}","page":"Home","title":"Logjam.MapTools.isptinbbox","text":"isptinbbox(pt, bbox::Tuple{Union{Tuple{<:Real, <:Real}, AbstractVector{<:Real}},\n                           Union{Tuple{<:Real, <:Real}, AbstractVector{<:Real}}}) -> Bool\n\nDetermines whether a given point lies within a specified bounding box.\n\nArguments\n\npt: A tuple or vector of exactly two elements representing the coordinates of the point (x, y).\nbbox: A tuple of two tuples or arrays, each containing two elements representing the bounding box. The first tuple/array defines the x-limits (xmin, xmax) and the second tuple/array defines the y-limits (ymin, ymax).\n\nReturns\n\nA Bool value:\ntrue if the point pt lies within the bounding box bbox.\nfalse otherwise.\n\nExample\n\npt = (5, 10)\nbbox = ((0, 10), (0, 15))\nisptinbbox(pt, bbox)  # returns true\n\npt_outside = (15, 10)\nisptinbbox(pt_outside, bbox)  # returns false\n\ninvalid_pt = (5,)\nisptinbbox(invalid_pt, bbox)  # throws ArgumentError\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.MapTools.makemap","page":"Home","title":"Logjam.MapTools.makemap","text":"makemap(x::Union{Nothing, AbstractVector{<:Real}, Tuple{Vararg{<:Real, 2}}} = nothing,\n        y::Union{Nothing, AbstractVector{<:Real}, Tuple{Vararg{<:Real, 2}}} = nothing;\n        region::Symbol = :World, backend::Symbol = :CairoMakie,\n        xexpand::Real = 0.3, yexpand::Real = 0.1, doRoadbkgd::Bool = true, maxroadlatspan::Real = 2.5) -> Figure, GeoAxis, Vector, Tuple\n\nCreates map visualization for predefined or user-defined region of interest. \n\nThe map can focus on different predefined regions (the world, U.S., or continental U.S.) or a user-defined region of interest that contains a set of longitude-latitude points. Provides Mercator projection of geographical features such as country borders, U.S. state borders, and roads using GeoMakie.\n\nArguments\n\nx: Optional set of at least two longitudes to define the region of interest; if nothing, defaults to a pre-defined region based on the region parameter.\ny: Optional set of at least two latitudes to define the region of interest; if nothing, defaults to a pre-defined region based on the region parameter.\nregion::Symbol: Specifies the region to focus on. Options include:\n:World: Default. Focuses on the entire world.\n:US: Focuses on the United States.\n:CUS: Focuses on the continental U.S. without showing country borders.\nbackend::Symbol: Specifies the rendering backend. Options are:\n:CairoMakie: Default. Uses CairoMakie for rendering.\n:GLMakie: Uses GLMakie for rendering.\nxexpand::Float64: Expansion factor for the x-axis limits. Default is 0.3.\nyexpand::Float64: Expansion factor for the y-axis limits. Default is 0.1.\ndoRoadbkgd::Bool: Whether to include roads as background features if maximum latitude span is less than maxroadlatspan. Default is true.\nmaxroadlatspan::Float64: Maximum latitude span for displaying roads. Default is 2.5°.\n\nReturns\n\nfig::Figure: The figure object containing the map.\nax::GeoAxis: The axis object where the map is drawn.\nhborders::Vector: A vector of handles for the lines plotted on the map in the following order:\nhborders[1]: NHS roads, if used (derived from: https://geodata.bts.gov/datasets/usdot::national-highway-system-nhs/explore).\nhborders[2]: U.S. state borders, if used (derived from: https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json)).\nhborders[3]: Country borders, if used (derived from https://github.com/PublicaMundi/MappingAPI/blob/master/data/geojson/countries.geojson?short_path=b27f2ec)).\nlimits::Tuple: The geographic limits (bounding box) used for the map.\n\nBehavior\n\nAutomatically selects the appropriate region and borders based on the provided x, y, and region parameters.\nChooses the rendering backend and activates it accordingly.\nDraws country borders, U.S. state borders, and National Highway System (NHS) roads depending on the specified options and region.\nIf x and y are provided, calculates the bounding box with optional expansion and adjusts the map view accordingly. Expansion allows for better visualization around x and y points.\n\nExamples\n\n# Create a world map using CairoMakie\nfig, ax = makemap()\ndisplay(fig)\n\n# Create a U.S. map with GLMakie backend\nfig, ax, hborders = makemap(region=:US, backend=:GLMakie)\ndisplay(fig)\n\n# Create a map focused on a specific region with expanded limits\nusing GeoMakie   # Required for scatter! function\nx = [-84.0, -83.0, -82.0]\ny = [41.0, 42.0, 43.0]\nfig, ax, hborders, limits = makemap(x, y)\nscatter!(ax, x, y, markersize=12, color=:red)\nprintln(limits)\ndisplay(fig)\n\n\n\n\n\n","category":"function"},{"location":"#Logjam.MapTools.mapbbox-Tuple{Union{Tuple{Vararg{Real}}, AbstractVector{<:Real}}, Union{Tuple{Vararg{Real}}, AbstractVector{<:Real}}}","page":"Home","title":"Logjam.MapTools.mapbbox","text":"mapbbox(x::Union{AbstractVector{<:Real}, Tuple{Vararg{<:Real}}},\n        y::Union{AbstractVector{<:Real}, Tuple{Vararg{<:Real}}};\n        xexpand::Float64=0.0, yexpand::Float64=0.0) -> Tuple, Tuple\n\nCalculates the bounding box for a set of geographic coordinates, with optional expansion along the x and y axes.\n\nArguments\n\nx: A vector or tuple of x-coordinates (longitude values).\ny: A vector or tuple of y-coordinates (latitude values).\nxexpand: A Float64 value (default = 0.0) specifying the fractional expansion of the bounding box along the x-axis. For example, xexpand=0.1 expands the bounding box by 10% on each side.\nyexpand: A Float64 value (default = 0.0) specifying the fractional expansion of the bounding box along the y-axis.\n\nReturns\n\nA tuple of x-limits and y-limits after applying any expansions, in the form ((xmin, xmax), (ymin, ymax)).\nA tuple of the original x-limits and y-limits without any expansion.\n\nDetails\n\nThe function first calculates the minimum and maximum values of x and y, ignoring any NaN values.\nIt then applies the specified xexpand and yexpand to enlarge the bounding box.\nThe x-limits are clamped to the range [-180, 180] to ensure valid longitude values.\nThe y-limits are clamped to slightly above -90 and slightly below 90 to ensure valid latitude values and avoid issues with map projections.\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools","page":"Home","title":"Logjam.DataTools","text":"DataTools\n\nThe DataTools module provides a set of functions and tools for working with U.S. geographical and statistical data.\n\nExported Functions:\n\nusplace: Returns a DataFrame containing U.S. place data.\nuscounty: Returns a DataFrame containing U.S. county data.\nuscentract: Returns a DataFrame containing U.S. Census Tract data.\nuscenblkgrp: Returns a DataFrame containing U.S. Census Block Group data.\nuszcta3: Returns a DataFrame containing U.S. ZIP Code Tabulation Area (3-digit) data.\nuszcta5: Returns a DataFrame containing U.S. ZIP Code Tabulation Area (5-digit) data.\nuscsa: Returns a DataFrame containing U.S. Combined Statistical Area (CSA) data.\nuscbsa: Returns a DataFrame containing U.S. Core-Based Statistical Area (CBSA) data.\nst2fips: Converts state abbreviations to FIPS codes.\n\nUsage:\n\n    using DataFrames\n    df = usplace()\n\n\n\n\n\n","category":"module"},{"location":"#Logjam.DataTools.loaddata-Tuple{Any}","page":"Home","title":"Logjam.DataTools.loaddata","text":"loaddata(fn::String) -> Any\n\nLoads and returns data from a serialized file in the \"data\" directory.\n\nThe function attempts to deserialize the specified file with a .jls extension. If an error occurs during loading, the function prints an error message and rethrows the exception.\n\nfn: String representing the filename (without extension) of the data to be loaded.\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.st2fips-Tuple{Symbol}","page":"Home","title":"Logjam.DataTools.st2fips","text":"st2fips(state::Symbol) -> Integer\n\nConvert a two-character symbol for US states and territories to its corresponding FIPS code.\n\nValid two-character symbols of the state or territory are AK, AL, AR, AS, AZ, CA, CO, CT, DC, DE, FL, GA, GU, HI, IA, ID, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MP, MS, MT, NC, ND, NE, NH, NJ, NM, NV, NY, OH, OK, OR, PA, PR, RI, SC, SD, TN, TX, UT, VA, VI, VT, WA, WI, WV, WY\n\nExamples\n\njulia> st2fips(:NC)\n37\n\njulia> st2fips.([:NC, :NY])\n2-element Vector{Int64}:\n37\n36\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uscbsa-Tuple{}","page":"Home","title":"Logjam.DataTools.uscbsa","text":"uscbsa() -> DataFrame\n\nReturns DataFrame containing U.S. Core-Based Statistical Area (CBSA) data.\n\nGeographic and population data for each U.S. CBSA. The latitude-longitude of each CBSA represents its center of population. CBSA geographic and populations are determiend by aggregating its constituent counties: summing population and areas, and determining the center of population by calculating the population-weighted centroid of the county centers of population. Does not include U.S. territories.\n\nColumns\n\nCBSA: Integer representing Core-Based Statistical Area code.\nNAME: String containing name of CBSA.\nLAT: Float representing latitude of CBSA center of population.\nLON: Float representing longitude of CBSA center of population.\nPOP: Integer representing population of CBSA.\nALAND: Float representing land area of CBSA in square miles.\nAWATER: Float representing water area of CBSA in square miles.\nM_MSA: String indicating whether CBSA is a Metropolitan Statistical Area or a Micropolitan Statistical Area.\nCSA: Integer or None representing Combined Statistical Area code if CBSA is part of a CSA.\nISCUS: Boolean indicating whether CBSA is within continental U.S. (true or false).\n\nSources\n\nCBSA delineations and classifications from [1]. Geographic and population data from uscounty().\n\nU.S. Census Bureau, Core based statistical areas (CBSAs), metropolitan divisions, and combined statistical areas (CSAs), list1_2023.xls\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uscenblkgrp-Tuple{}","page":"Home","title":"Logjam.DataTools.uscenblkgrp","text":"uscenblkgrp() -> DataFrame\n\nReturns DataFrame containing U.S. census block group-level data.\n\nGeographic and population data for each U.S. census block group, including latitude-longitude coordinates representing the center of population of the block group.  Does not include U.S. territories.\n\nColumns\n\nSTFIP: Integer representing state FIPS (Federal Information Processing Standards) code.\nCOFIP: Integer representing county FIPS code.\nTRFIP: Integer representing census tract FIPS code.\nBGFIP: Integer representing census block group FIPS code.\nLAT: Float representing latitude of block group center of population.\nLON: Float representing longitude of block group center of population.\nPOP: Integer representing population of block group.\nALAND: Float representing land area of block group in square miles.\nAWATER: Float representing water area of block group in square miles.\n\nSources\n\nArea data from [1]. Population and center of population data from [2].\n\nU.S. Census Bureau, TIGER/Line Shapefiles for 2020 Census Block Groups, [https://www2.census.gov/geo/tiger/TIGER2020/BG/]\nU.S. Census Bureau, Centers of Population, CenPop2020MeanBG.txt\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uscentract-Tuple{}","page":"Home","title":"Logjam.DataTools.uscentract","text":"uscentract() -> DataFrame\n\nReturns DataFrame containing U.S. census tract-level data.\n\nGeographic and population data for each U.S. census tract, including latitude-longitude coordinates representing the center of population of the tract. Does not include U.S. territories.\n\nColumns\n\nSTFIP: Integer representing state FIPS (Federal Information Processing Standards) code.\nCOFIP: Integer representing county FIPS code.\nTRFIP: Integer representing census tract FIPS code.\nST: String representing state abbreviation (e.g., AL for Alabama).\nLAT: Float representing latitude of census tract center of population.\nLON: Float representing longitude of census tract center of population.\nPOP: Integer representing population of census tract.\nALAND: Float representing land area of census tract in square miles.\nAWATER: Float representing water area of census tract in square miles.\nISCUS: Boolean indicating whether census tract is within continental U.S. (true or false).\n\nSources\n\nArea data from [1]. Population and center of population data from [2].\n\nU.S. Census Bureau, 2020 Gazetteer Files, 2020Gaztract_national.txt\nU.S. Census Bureau, Centers of Population, CenPop2020MeanTR.txt\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uscounty-Tuple{}","page":"Home","title":"Logjam.DataTools.uscounty","text":"uscounty() -> DataFrame\n\nReturns DataFrame containing U.S. county-level data.\n\nGeographic and population data for each U.S. county, including latitude-longitude coordinates representing the center of population of the county. Does not include U.S. territories.\n\nColumns\n\nSTFIP: Integer representing state FIPS (Federal Information Processing Standards) code.\nCOFIP: Integer representing county FIPS code.\nNAME: String containing name of county.\nST: String representing state abbreviation (e.g., AL for Alabama).\nLAT: Float representing latitude of county center of population.\nLON: Float representing longitude of county center of population.\nPOP: Integer representing population of county.\nALAND: Float representing land area of county in square miles.\nAWATER: Float representing water area of county in square miles.\nCBSA: Integer or None representing Core-Based Statistical Area code associated with county.\n\nSources\n\nArea data from [1], population and center of population data from [2], and CBSA data from [3].\n\nU.S. Census Bureau, 2020 Gazetteer Files, 2020Gazcounty_national.txt\nU.S. Census Bureau, Centers of Population, CenPop2020MeanCO.txt\nU.S. Census Bureau, Core based statistical areas (CBSAs), metropolitan divisions, and combined statistical areas (CSAs), list1_2023.xls\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uscsa-Tuple{}","page":"Home","title":"Logjam.DataTools.uscsa","text":"uscsa() -> DataFrame\n\nReturns DataFrame containing U.S. Combined Statistical Area (CSA) data.\n\nGeographic and population data for each U.S. CSA. The latitude-longitude of each CSA represents its center of population. CSA geographic and populations are determined by aggregating its constituent CBSAs: summing population and areas, and determining the center of population by calculating the population-weighted centroid of the CBSA centers of population. Does not include U.S. territories.\n\nColumns\n\nCSA: Integer representing Combined Statistical Area code.\nNAME: String containing name of CSA.\nLAT: Float representing latitude of CSA center of population.\nLON: Float representing longitude of CSA center of population.\nPOP: Integer representing population of CSA.\nALAND: Float representing land area of CSA in square miles.\nAWATER: Float representing water area of CSA in square miles.\n\nSources\n\nCSA delineations and classifications from [1]. Geographic and population data from uscbsa().\n\nU.S. Census Bureau, 2023 Combined Statistical Area (CSA) Codes, list2_2023.xls\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.usplace-Tuple{}","page":"Home","title":"Logjam.DataTools.usplace","text":"usplace() -> DataFrame\n\nReturns DataFrame containing U.S. place data.\n\nGeographic and population data for each place in the U.S., where each place is a city, town, or census-designated place (CDP). The latitude-longitude of each place represents a central location interior to the place and not its center of population.  Does not include U.S. territories.\n\nColumns\n\nSTFIP: Integer representing state FIPS (Federal Information Processing Standards) code.\nPLFIP: Integer representing place FIPS code.\nNAME: String containing name of place (city, town, or CDP).\nST: String representing state abbreviation (e.g., AL for Alabama).\nLAT: Float representing an interior latitude of place.\nLON: Float representing an interior longitude of place.\nPOP: Integer representing population of place.\nALAND: Float representing land area of place in square miles.\nAWATER: Float representing water area of place in square miles.\nLSAD: Integer representing legal/statistical area description code (e.g., 25 for a place).\nFUNCSTAT: String representing functional status of place (e.g., A for active).\nCBSA: Integer or None representing Core-Based Statistical Area code associated with place.\nISCUS: Boolean indicating whether place is within continental U.S. (true or false).\n\nSources\n\nGeographic data derived from [1], population data from [2], and CBSA from [3]. ICUS determined from LAT and LON.\n\nU.S. Census Bureau, 2020 Gazetteer Files, 2020Gazplace_national.txt\nU.S. Census Bureau, 2020 Census Demographic and Housing Characteristics File (DHC), DECENNIALDHC2020.P1\nU.S. Census Bureau, Principal cities of metropolitan and micropolitan statistical areas, list2_2023.xls\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uszcta3-Tuple{}","page":"Home","title":"Logjam.DataTools.uszcta3","text":"uszcta3() -> DataFrame\n\nReturns DataFrame containing U.S. 3-digit ZIP Code Tabulation Area (ZCTA3) data.\n\nGeographic and population data for each U.S. 3-digit ZIP Code Tabulation Area (ZCTA3). The latitude-longitude of each ZCTA3 represents its approximate center of population. ZCTA3s are approximated by aggregating ZCTA5s: summing population and areas, and approximating the center of population by calculating the population-weighted centroid of the ZCTA5s' interior locations. Does not include U.S. territories.\n\nColumns\n\nZCTA3: Integer (<= 3 digits) representing the 3-digit ZIP Code Tabulation Area (ZCTA3) code.\nLAT: Float representing latitude of ZCTA3 approximate center of population.\nLON: Float representing longitude of ZCTA3 approximate center of population.\nPOP: Integer representing population of ZCTA3.\nALAND: Float representing land area of ZCTA3 in square miles.\nAWATER: Float representing water area of ZCTA3 in square miles.\nISCUS: Boolean indicating whether ZCTA3 is within continental U.S. (true or false).\n\nSources\n\nAll data derived from uszcta5.\n\n\n\n\n\n","category":"method"},{"location":"#Logjam.DataTools.uszcta5-Tuple{}","page":"Home","title":"Logjam.DataTools.uszcta5","text":"uszcta5() -> DataFrame\n\nReturns DataFrame containing U.S. 5-digit ZIP Code Tabulation Area (ZCTA5) data.\n\nGeographic and population data for each U.S. 5-digit ZIP Code Tabulation Area (ZCTA5). The latitude-longitude of each ZCTA5 represents a central location within the ZCTA5 and not its center of population. Does not include U.S. territories.\n\nColumns\n\nZCTA5: Integer (<= 5 digits) representing the ZIP Code Tabulation Area (ZCTA5) code.\nLAT: Float representing an interior latitude of ZCTA5.\nLON: Float representing an interior longitude of ZCTA5.\nPOP: Integer representing population of ZCTA5.\nALAND: Float representing land area of ZCTA5 in square miles.\nAWATER: Float representing water area of ZCTA5 in square miles.\nISCUS: Boolean indicating whether ZCTA5 is within continental U.S. (true or false).\n\nSources\n\nGeographic data derived from [1]. Population data derived from [2]. ISCUS determined from LAT and LON.\n\nU.S. Census Bureau, 2023 Gazetteer Files, 2023Gazzcta_national.txt\nU.S. Census Bureau, 2020 Census Demographic and Housing Characteristics File (DHC), DECENNIALDHC2020.P1\n\n\n\n\n\n","category":"method"}]
}
